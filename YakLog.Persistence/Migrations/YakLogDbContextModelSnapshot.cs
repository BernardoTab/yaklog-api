// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YakLogApi.Persistence;

#nullable disable

namespace YakLog.Persistence.Migrations
{
    [DbContext(typeof(YakLogDbContext))]
    partial class YakLogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.19");

            modelBuilder.Entity("YakLog.Domain.Entities.MediaItems.MediaItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Finished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageFilePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<long>("PortfolioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("MediaItem");

                    b.HasDiscriminator<string>("MediaType").HasValue("MediaItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("YakLog.Domain.Entities.Portfolio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Portfolios", (string)null);
                });

            modelBuilder.Entity("YakLogApi.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageFilePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("YakLog.Domain.Entities.MediaItems.Book", b =>
                {
                    b.HasBaseType("YakLog.Domain.Entities.MediaItems.MediaItem");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("YakLog.Domain.Entities.MediaItems.Game", b =>
                {
                    b.HasBaseType("YakLog.Domain.Entities.MediaItems.MediaItem");

                    b.Property<string>("Console")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Game");
                });

            modelBuilder.Entity("YakLog.Domain.Entities.MediaItems.Movie", b =>
                {
                    b.HasBaseType("YakLog.Domain.Entities.MediaItems.MediaItem");

                    b.Property<string>("Director")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("YakLog.Domain.Entities.MediaItems.Project", b =>
                {
                    b.HasBaseType("YakLog.Domain.Entities.MediaItems.MediaItem");

                    b.HasDiscriminator().HasValue("Project");
                });

            modelBuilder.Entity("YakLog.Domain.Entities.MediaItems.SeriesSeason", b =>
                {
                    b.HasBaseType("YakLog.Domain.Entities.MediaItems.MediaItem");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("SeriesSeason");
                });

            modelBuilder.Entity("YakLog.Domain.Entities.MediaItems.MediaItem", b =>
                {
                    b.HasOne("YakLog.Domain.Entities.Portfolio", "Portfolio")
                        .WithMany("MediaItems")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("YakLog.Domain.Entities.Portfolio", b =>
                {
                    b.HasOne("YakLogApi.Entities.User", "User")
                        .WithOne("Portfolio")
                        .HasForeignKey("YakLog.Domain.Entities.Portfolio", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YakLog.Domain.Entities.Portfolio", b =>
                {
                    b.Navigation("MediaItems");
                });

            modelBuilder.Entity("YakLogApi.Entities.User", b =>
                {
                    b.Navigation("Portfolio")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
